stages:
  - test
  - validate
  - plan
  - apply
  - deploy
  - destroy

variables:
  TF_ROOT: ${CI_PROJECT_DIR}/terraform
  ANSIBLE_ROOT: ${CI_PROJECT_DIR}/ansible
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  AWS_DEFAULT_REGION: "eu-west-1"
  # Variables de version
  TERRAFORM_VERSION: "1.11"
  ANSIBLE_VERSION: "11.0.0"
  MOLECULE_VERSION: "6.0.2"
  GOLANG_VERSION: "1.21"
  PYTHON_VERSION: "3.11"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ${TF_ROOT}/.terraform

# Tests unitaires
test:
  stage: test
  image: golang:${GOLANG_VERSION}
  before_script:
    - apt-get update && apt-get install -y python3-pip
    - pip install ansible==${ANSIBLE_VERSION} molecule==${MOLECULE_VERSION} molecule-docker ansible-lint yamllint
    - cd ${TF_ROOT}/test && go mod download
    # Installer Terraform
    - wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
    - echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
    - apt-get update && apt-get install -y terraform=${TERRAFORM_VERSION}
  script:
    - cd ${CI_PROJECT_DIR}
    - chmod +x scripts/run_tests.sh
    - ./scripts/run_tests.sh
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "main"'

# Validation de la syntaxe Terraform
validate:
  stage: validate
  image: hashicorp/terraform:${TERRAFORM_VERSION}
  script:
    - cd ${TF_ROOT}
    - terraform init -backend=false
    - terraform validate
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "main"'

# Planification des changements Terraform
plan:
  stage: plan
  image: hashicorp/terraform:${TERRAFORM_VERSION}
  script:
    - cd ${TF_ROOT}
    - terraform init
    - terraform plan -out=tfplan
  artifacts:
    paths:
      - ${TF_ROOT}/tfplan
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "main"'

# Application des changements Terraform
apply:
  stage: apply
  image: hashicorp/terraform:${TERRAFORM_VERSION}
  script:
    - cd ${TF_ROOT}
    - terraform init
    - terraform apply -auto-approve tfplan
    - terraform output -json > ${CI_PROJECT_DIR}/terraform_output.json
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/terraform_output.json
    expire_in: 1 week
  dependencies:
    - plan
  when: manual
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# Déploiement avec Ansible
deploy:
  stage: deploy
  image: python:${PYTHON_VERSION}-slim
  before_script:
    - apt-get update && apt-get install -y openssh-client jq awscli
    - pip install ansible==${ANSIBLE_VERSION} boto3 botocore
    # Installation des collections Ansible nécessaires
    - ansible-galaxy collection install amazon.aws
  script:
    - cd ${ANSIBLE_ROOT}
    - mkdir -p ~/.ssh
    - echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    
    # Récupération des outputs Terraform pour les tags
    - export INSTANCE_ID=$(cat ${CI_PROJECT_DIR}/terraform_output.json | jq -r '.instance_id.value')
    - export REGION=$(cat ${CI_PROJECT_DIR}/terraform_output.json | jq -r '.region.value')
    
    # Vérification que l'instance est bien disponible
    - |
      echo "Vérification de l'état de l'instance ${INSTANCE_ID}..."
      INSTANCE_STATE=$(aws ec2 describe-instances --region ${REGION} --instance-ids ${INSTANCE_ID} --query 'Reservations[0].Instances[0].State.Name' --output text)
      echo "État de l'instance: ${INSTANCE_STATE}"
      if [ "${INSTANCE_STATE}" != "running" ]; then
        echo "L'instance n'est pas en cours d'exécution. Tentative de démarrage..."
        aws ec2 start-instances --region ${REGION} --instance-ids ${INSTANCE_ID}
        echo "Attente du démarrage de l'instance..."
        aws ec2 wait instance-running --region ${REGION} --instance-ids ${INSTANCE_ID}
      fi
    
    # Création du fichier de configuration pour l'inventaire dynamique AWS
    - |
      cat > aws_ec2.yml << EOF
      ---
      plugin: amazon.aws.aws_ec2
      regions:
        - ${REGION}
      filters:
        instance-id: "${INSTANCE_ID}"
      keyed_groups:
        - key: tags.Name
          prefix: tag_Name_
        - key: instance_type
          prefix: instance_type_
      hostnames:
        - ip-address
      compose:
        ansible_host: public_ip_address
      EOF
    
    # Création du fichier de configuration Ansible
    - |
      cat > ansible.cfg << EOF
      [defaults]
      host_key_checking = False
      inventory = aws_ec2.yml
      remote_user = ubuntu
      private_key_file = ~/.ssh/id_rsa
      
      [inventory]
      enable_plugins = amazon.aws.aws_ec2
      EOF
    
    # Attente que l'instance soit accessible via SSH
    - |
      echo "Attente que SSH soit disponible..."
      PUBLIC_IP=$(aws ec2 describe-instances --region ${REGION} --instance-ids ${INSTANCE_ID} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
      for i in $(seq 1 30); do
        if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i ~/.ssh/id_rsa ubuntu@${PUBLIC_IP} "echo SSH disponible"; then
          echo "SSH est disponible!"
          break
        fi
        if [ $i -eq 30 ]; then
          echo "Timeout en attendant que SSH soit disponible"
          exit 1
        fi
        echo "Tentative $i/30. Nouvelle tentative dans 10 secondes..."
        sleep 10
      done
    
    # Test de l'inventaire dynamique
    - ansible-inventory --graph
    
    # Exécution du playbook avec l'inventaire dynamique AWS
    - ansible-playbook playbook.yml -v
    
    # Vérification post-déploiement
    - |
      echo "Vérification du déploiement..."
      ansible all -m shell -a "systemctl status ollama || true"
      ansible all -m shell -a "pm2 status || true"
  dependencies:
    - apply
  when: manual
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  artifacts:
    paths:
      - ${ANSIBLE_ROOT}/aws_ec2.yml
      - ${ANSIBLE_ROOT}/ansible.cfg
    expire_in: 1 week

# Destruction de l'infrastructure
destroy:
  stage: destroy
  image: hashicorp/terraform:${TERRAFORM_VERSION}
  script:
    - cd ${TF_ROOT}
    - terraform init
    - terraform destroy -auto-approve
  when: manual
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"' 