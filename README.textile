h1. Projet DeepSeek R1 sur AWS EC2 avec Terraform et Ansible

h2. Objectif du Projet

p. Déploiement automatisé de DeepSeek R1 sur une instance AWS EC2 g5.xlarge en utilisant une approche Infrastructure as Code (IaC). Le projet utilise des instances spot pour optimiser les coûts.

h2. Architecture

* *Infrastructure*: AWS EC2 g5.xlarge (GPU) en région eu-west-1 (Irlande)
* *Modèle*: DeepSeek R1 via Ollama
* *Interface*: UI Web Next.js
* *Outils IaC*: Terraform 1.11 + Ansible 11
* *CI/CD*: GitLab CI

h2. Prérequis

* AWS CLI configuré
* Terraform >= 1.11
* Ansible >= 11.0.0
* Paire de clés SSH AWS
* AMI Ubuntu 24.04 LTS ARM64
* Go 1.21 (pour les tests)

h2. Structure du Projet

bc. 
project/
├── terraform/
│   ├── main.tf         # Configuration EC2 et sécurité
│   ├── variables.tf    # Variables Terraform
│   ├── outputs.tf      # Outputs (IP, DNS, etc.)
│   └── test/           # Tests Terraform avec Terratest
├── ansible/
│   ├── inventory.yml   # Inventaire des hôtes
│   ├── playbook.yml    # Playbook principal
│   └── roles/
│       └── ollama/     # Rôle pour DeepSeek/Ollama
│           ├── tasks/  # Tâches Ansible
│           └── molecule/ # Tests du rôle avec Molecule
└── .gitlab-ci.yml      # Pipeline CI/CD

h2. Déploiement

h3. 1. Préparation des variables

bc. 
# Créer un fichier terraform.tfvars
aws_region     = "eu-west-1"  # Irlande, où g5.xlarge est disponible
ami_id         = "ami-0e2d98d2a1e9f0169"  # AMI Ubuntu 24.04 ARM64
key_name       = "votre-key"
allowed_ip     = "x.x.x.x/32" # Votre IP CIDR
max_spot_price = "1.5"        # Prix max instance spot

h3. 2. Déploiement de l'infrastructure

bc. 
cd terraform
terraform init
terraform plan
terraform apply

h3. 3. Configuration de l'inventaire Ansible

bc. 
# ansible/inventory.yml
ollama_instances:
  hosts:
    ollama-1:
      ansible_host: <EC2_PUBLIC_IP>  # Utiliser l'output Terraform
      ansible_user: ubuntu
      ansible_ssh_private_key_file: /path/to/key.pem

h3. 4. Déploiement de l'application

bc. 
cd ../ansible
ansible-playbook -i inventory.yml playbook.yml

h2. Tests

h3. Tests Terraform

bc. 
cd terraform/test
go test -v -timeout 30m

h3. Tests Ansible

bc. 
cd ansible/roles/ollama
molecule test

h3. Exécution de tous les tests

bc. 
./scripts/run_tests.sh

h2. Pipeline CI/CD

Le projet inclut une pipeline GitLab CI avec les étapes suivantes:

* *test*: Exécute les tests Terraform et Ansible
* *validate*: Valide la syntaxe Terraform
* *plan*: Planifie les changements d'infrastructure
* *apply*: Applique les changements (manuel)
* *deploy*: Déploie l'application avec Ansible (manuel)
* *destroy*: Détruit l'infrastructure (manuel)

h3. Variables d'environnement GitLab CI

* AWS_ACCESS_KEY_ID
* AWS_SECRET_ACCESS_KEY
* SSH_PRIVATE_KEY

h2. Optimisation des Coûts

* Instance Spot EC2 (économie jusqu'à 70%)
* Volume gp3 pour un meilleur rapport coût/performance
* Sécurité groupe restreint aux IPs nécessaires
* Arrêt automatique de l'instance pendant les périodes d'inactivité

h2. Monitoring

* PM2 pour la gestion des processus Node.js
* CloudWatch pour les métriques EC2
* Logs Ollama dans @/var/log/ollama@

h2. Arrêt des Ressources

bc. 
cd terraform
terraform destroy

h2. Points d'Attention

h3. Coûts:
* Instance g5.xlarge (~$734/mois à la demande, ~$220-300/mois en spot)
* Stockage gp3 100GB (~$10/mois)
* *IMPORTANT*: Surveillez attentivement votre utilisation pour éviter des coûts imprévus

h3. Sécurité:
* Accès limité par IP
* Ports exposés: 22 (SSH), 3000 (UI)

h3. Performance:
* Modèle ~20GB en RAM
* Temps de démarrage ~5-10min

h2. Maintenance

h3. Mise à jour du modèle:

bc. ollama pull deepseek-r1:latest

h3. Redémarrage de l'UI:

bc. pm2 restart ollama-ui

h3. Mise à jour des versions:

Pour mettre à jour les versions des outils, modifiez les variables dans @.gitlab-ci.yml@:

bc. 
TERRAFORM_VERSION: "1.11"
ANSIBLE_VERSION: "11.0.0"
MOLECULE_VERSION: "6.0.2"
GOLANG_VERSION: "1.21"
PYTHON_VERSION: "3.11"

h2. Documentation Additionnelle

* "Ollama Documentation":https://ollama.ai/docs
* "DeepSeek R1 Model":https://github.com/deepseek-ai/DeepSeek-LLM
* "Next.js Ollama UI":https://github.com/jakobhoeg/nextjs-ollama-llm-ui
* "Terraform Documentation":https://developer.hashicorp.com/terraform/docs
* "Ansible Documentation":https://docs.ansible.com/

h2. Contribution

# Fork le projet
# Créer une branche (@git checkout -b feature/amelioration@)
# Commit (@git commit -am 'Ajout de fonctionnalité'@)
# Push (@git push origin feature/amelioration@)
# Créer une Pull Request 